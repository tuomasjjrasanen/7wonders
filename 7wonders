#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright © 2015 Tuomas Räsänen <tuomasjjrasanen@tjjr.fi>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import collections
import csv
import sys

from matplotlib import pyplot
import numpy

PARAM_NAMES = (
    'military',
    'gold',
    'wonder',
    'civic',
    'commercial',
    'guild',
    'science',
    'total',
    'ranking',
)

CSV_FIELDS_PARTIAL_SCORES = {
    'military'   : int,
    'gold'       : int,
    'wonder'     : int,
    'civic'      : int,
    'commercial' : int,
    'guild'      : int,
    'science'    : int,
}

CSV_FIELDS_SCORES = {
    'total'      : int,
}
CSV_FIELDS_SCORES.update(CSV_FIELDS_PARTIAL_SCORES)

CSV_FIELDS = {
    'gameid' : lambda x: x,
}
CSV_FIELDS.update(CSV_FIELDS_SCORES)

def main(csv_file):
    csv_reader = csv.DictReader(csv_file)

    params = {}

    total_scores = collections.OrderedDict()

    for row in csv_reader:
        if len(row) != len(csv_reader.fieldnames):
            print('error: line %d: expected %d columns, but got %d'
                  % (csv_reader.line_num, len(csv_reader.fieldnames), len(row)),
                  file=sys.stderr)
            sys.exit(1)

        for field_name, field_type in CSV_FIELDS.items():
            row[field_name] = field_type(row[field_name])

        total_score = sum([row[f] for f in CSV_FIELDS_PARTIAL_SCORES])
        if row['total'] != total_score:
            print('warning: line %d: wrong total score %d, expected %d'
                  % (csv_reader.line_num, row['total'], total_score),
                  file=sys.stderr)
        row['total'] = total_score

        for field_name in CSV_FIELDS_SCORES:
            params.setdefault(field_name, []).append(row[field_name])

        total_scores.setdefault(row['gameid'], []).append(total_score)

    for gameid, game_scores in total_scores.items():
        max_game_score = max(game_scores)
        for game_score in game_scores:
            i = list(sorted(game_scores)).index(game_score)
            ranking = i / (len(game_scores) - 1)
            params.setdefault('ranking', []).append(ranking)

    param_values = []
    for param_name in PARAM_NAMES:
        param_values.append(params[param_name])

    r = numpy.corrcoef(param_values)

    pyplot.pcolor(r)
    pyplot.colorbar().set_clim((-1.0, 1.0))
    pyplot.yticks(numpy.arange(0.5,len(params)), PARAM_NAMES)
    pyplot.xticks(numpy.arange(0.5,len(params)), PARAM_NAMES, rotation=90)
    pyplot.set_cmap('RdBu_r')
    pyplot.savefig('7wonders_corrcoef.png')

    for i in range(len(PARAM_NAMES)):
        for j in range(len(PARAM_NAMES)):
            pyplot.close()
            pyplot.figure()
            x = param_values[i]
            y = param_values[j]
            pyplot.scatter(x, y, c='g', s=160, alpha=0.20)
            pyplot.xlabel(PARAM_NAMES[i])
            pyplot.ylabel(PARAM_NAMES[j])
            pyplot.savefig("7wonders_corrcoef_%s_%s.png" %
                           (PARAM_NAMES[i], PARAM_NAMES[j]))

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("error: invalid number of arguments (%d), expected 1"
              % (len(sys.argv) - 1), file=sys.stderr)
        print("usage: %s CSV_FILE" % sys.argv[0], file=sys.stderr)
        sys.exit(1)

    with open(sys.argv[1]) as csv_file:
        main(csv_file)
